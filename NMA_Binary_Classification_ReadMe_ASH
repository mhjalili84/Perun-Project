
## ðŸ“Œ Project Highlights

* Custom CNN architecture with 4 convolutional layers and dropout regularization
* Input images resized to 224Ã—224 (grayscale or RGB)
* Binary classification using **BCEWithLogitsLoss**
* Optimizer: **Adam** (lr = 1e-4, weight\_decay = 1e-5)
* Learning rate scheduler: **ReduceLROnPlateau**
* Early stopping based on validation loss to avoid overfitting
* Data augmentation and proper train/val/test split
* Model performance evaluated with:

  * Accuracy, Precision, Recall, F1-score, AUC
  * Confusion Matrix
* Grad-CAM ready for model interpretability
* Option to save the full model (.pt) to Google Drive

---

## ðŸ§  Model Architecture

* **Input**: 224Ã—224 grayscale or RGB image
* **Layers**:

  * 4 Ã— Conv2D + ReLU + MaxPooling
  * 2 Ã— Fully Connected Layers + Dropout
  * Final Sigmoid layer for probability output

---

## ðŸš€ Training Workflow

* Binary classification: Frontal (0) vs Lateral (1)
* Loss function: `BCEWithLogitsLoss`
* Regularization: Dropout (p = 0.3)
* Evaluation includes training and validation metrics
* Early stopping and LR scheduler for optimized training

---

## âœ… Sample Results

```
Epoch 5/5 | Train Loss: 0.0127, Acc: 0.9954 | Val Loss: 0.0127, Acc: 0.9974  
Precision: 1.00 | Recall: 0.99 | F1-score: 1.00 | AUC: 1.00  
```

---

## ðŸ“¦ Key Files & Functions

* `ChestXRayClassifier`: CNN model definition
* `train_model()`: Training loop with performance logging
* `create_data_loaders()`: Dataset loading, splitting, and augmentation
* `evaluate_model()`: Computes performance metrics and plots
* `predict_single_image()`: Predicts view for a single X-ray image

